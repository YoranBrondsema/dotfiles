import { test, moduleForComponent } from 'ember-qunit';
import Ember from 'ember';
import { manualSetup, make, mockDelete } from 'ember-data-factory-guy';
import renderWithWormholes from 'frontend/tests/utils/render-with-wormholes';

import page from 'frontend/tests/pages/story';
import shareStoryPage from 'frontend/tests/pages/share-story';

import initRouter from 'frontend/tests/helpers/init-router';
import initEmberTether from 'frontend/tests/helpers/init-ember-tether';
import wait from 'ember-test-helpers/wait';
import exists from 'frontend/tests/helpers/exists';
import deleteStory from 'frontend/tests/helpers/delete-story';
import makeStoryPrivate from 'frontend/tests/helpers/make-story-private';
import succeedingPromise from 'frontend/tests/helpers/succeeding-promise';
import { click } from 'ember-native-dom-helpers';

moduleForComponent('story-toolbar', 'Component - Story toolbar - Integration', {
  integration: true,
  beforeEach() {
    this.inject.service('session');
    this.inject.service('store');
    this.inject.service('analytics');
    this.inject.service('commandFactory');
    this.inject.service('notifications');
    this.inject.service('storyCollaboration');

    manualSetup(this.container);

    initRouter(this);
    initEmberTether(this);

    // Clear the localStorage for storage. We test on Chrome so we know
    // that localStorage exists and it won't fall back to cookies.
    window.localStorage.clear();

    page.setContext(this);
    shareStoryPage.setContext(this);
    window.wait = wait;
  },
  afterEach() {
    page.removeContext();
    shareStoryPage.removeContext();

    $.mockjax.clear();
  }
});

test('Call to action for guests', function(assert) {
  const story = make('story');
  this.set('story', story);

  renderWithWormholes(`
    {{story-toolbar
        story=story
        isEmbedded=isEmbedded
    }}
  `, this);

  assert.ok(page.toolbar.showsCallToAction);

  this.set('isEmbedded', true);
  assert.notOk(
    page.toolbar.showsCallToAction,
    `Does not show the CTA when the story is embedded`
  );
  this.set('isEmbedded', false);

  this.set('session.currentUser', make('user'));
  assert.notOk(
    page.toolbar.showsCallToAction,
    `Does not show the CTA when a user is logged in`
  );
  this.set('session.currentUser', null);
});

test('View on Sutori', async function(assert) {
  const story = make('story');
  this.set('story', story);

  renderWithWormholes(`
    {{story-toolbar
        story=story
        isEmbedded=isEmbedded
    }}
  `, this);

  // Can show the branding
  Ember.run(() => {
    story.set('canShowSutoriLogoInAnEmbed', true);
  });

  // Not embedded
  this.set('isEmbedded', false);
  assert.notOk(exists('.button-view-on-sutori-primary'), 'Does not show the call to action');

  // Embedded
  this.set('isEmbedded', true);
  assert.ok(exists('.button-view-on-sutori-primary'), 'Shows the call to action');

  // Can not show the branding
  Ember.run(() => {
    story.set('canShowSutoriLogoInAnEmbed', false);
  });
  assert.notOk(exists('.button-view-on-sutori-primary'), 'Does not show the call to action');
  Ember.run(() => {
    story.set('canShowSutoriLogoInAnEmbed', true);
  });
  assert.ok(exists('.button-view-on-sutori-primary'), 'Shows the call to action');
});

test(`Collaborate via 'Collaborate' button`, async function(assert) {
  const user = make('user');
  const story = make('story', {
    author: user
  });
  this.set('story', story);

  renderWithWormholes(`
    {{story-toolbar
        story=story
        storyIsValid=true
    }}
  `, this);

  // Current user is owner
  Ember.run(() => {
    this.set('session.currentUser', user);
  });

  await page.openCollaborationModal();

  assert.ok(exists('.page-collaborate-on-story.is-active'), "Displays the 'Share story' modal");
});

test('Copy story - user can copy the story', async function(assert) {
  const user = make('user');
  this.set('session.currentUser', user);
  const story = make('sutori-story');
  this.set('story', story);

  const onTransitionToRoute = mockFunction();
  this.on('transitionToRoute', onTransitionToRoute);

  renderWithWormholes(`
    {{story-toolbar
        transitionToRoute=(action 'transitionToRoute')
        story=story
    }}
  `, this);

  // Mock the command
  const createCommand = mockFunction();
  this.get('commandFactory').createCommand = createCommand;
  const execute = mockFunction();
  when(createCommand)('copy-story').thenReturn({
    execute: execute
  });
  const copy = make('story');
  when(execute)(story).thenReturn(succeedingPromise(copy));

  const showSuccessMessage = mockFunction();
  this.get('notifications').showSuccessMessage = showSuccessMessage;

  await page.openSecondaryMenu();
  await click('.button-copy-story');

  assert.notOk(verify(onTransitionToRoute)('story', copy));
  assert.notOk(verify(showSuccessMessage)(string()), 'Shows a success message');
});

test('Copy story - cannot copy an embedded story', function(assert) {
  const user = make('user');
  this.set('session.currentUser', user);
  const story = make('story', 'public');
  this.set('story', story);

  renderWithWormholes(`
    {{story-toolbar
        story=story
        isEmbedded=true
    }}
  `, this);

  assert.notOk(page.showsSecondaryActions);
});

test('Copy story - cannot copy a story when not logged in', async function(assert) {
  const story = make('story', 'public');
  this.set('story', story);

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await page.openSecondaryMenu();

  assert.notOk(page.canCopy);
});

test('Delete story - visibility of button', async function(assert) {
  const story = make('story');
  this.set('story', story);

  const user = make('user');
  const editor = make('editor');

  renderWithWormholes(`
    {{story-toolbar
        story=story
        canModifyStory=canModifyStory
    }}
  `, this);

  // Can modify
  this.set('canModifyStory', true);

  // Non-editor
  this.set('session.currentUser', user);
  await page.openSecondaryMenu();

  assert.notOk(exists('.button-delete-story'), 'Does not show if the user is not the author');

  Ember.run(() => {
    story.set('author', user);
  });

  assert.ok(exists('.button-delete-story'), 'Shows if the user is the author');

  // Editor
  this.set('session.currentUser', editor);

  assert.ok(exists('.button-delete-story'), 'Shows for editor if can modify');

  // Can not modify
  this.set('canModifyStory', false);
  this.set('session.currentUser', user);

  assert.notOk(exists('.button-delete-story'), 'Does not show if the user can not modify');

  // Editor
  this.set('session.currentUser', editor);

  assert.notOk(exists('.button-delete-story'), 'Does not show if the user can not modify');
});

test('Delete story', async function(assert) {
  const user = make('user');
  const story = make('story', {
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);

  const mockDestroy = mockDelete('story', 1);

  const showSuccessMessage = mockFunction();
  this.get('notifications').showSuccessMessage = showSuccessMessage;

  const trackStoryEvent = mockFunction();
  this.get('analytics').trackStoryEvent = trackStoryEvent;

  const mockDeleteStory = mockFunction();
  this.get('storyCollaboration').deleteStory = mockDeleteStory;

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await deleteStory();

  assert.equal(mockDestroy.timesCalled, 1, 'Deletes the story');
  assert.notOk(verify(showSuccessMessage)(string()), 'Shows a success message');
  assert.notOk(verify(trackStoryEvent)('Story Deletion', story), 'Tracks the deletion in the analytics');
  assert.notOk(verify(mockDeleteStory)(story), 'Tells collaboration that the story has been deleted');
});

test('Delete story - transitions to the story unit for editors', async function(assert) {
  const user = make('editor');
  const story = make('sutori-story', {
    author: user
  });
  const unit = story.get('storyUnit');
  this.set('story', story);
  this.set('session.currentUser', user);

  mockDelete('story', 1);

  const showSuccessMessage = mockFunction();
  this.get('notifications').showSuccessMessage = showSuccessMessage;

  const onTransitionToRoute = mockFunction();
  this.on('transitionToRoute', onTransitionToRoute);

  renderWithWormholes(`
    {{story-toolbar
        transitionToRoute=(action 'transitionToRoute')
        story=story
    }}
  `, this);

  await deleteStory();

  assert.notOk(verify(onTransitionToRoute)('storyUnit', unit));
});

test(`Delete story - transitions to the dashboard for non-editors if there's no group`, async function(assert) {
  const user = make('user');
  const story = make('story', {
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);

  mockDelete('story', 1);

  const showSuccessMessage = mockFunction();
  this.get('notifications').showSuccessMessage = showSuccessMessage;

  const onTransitionToRoute = mockFunction();
  this.on('transitionToRoute', onTransitionToRoute);

  renderWithWormholes(`
    {{story-toolbar
        transitionToRoute=(action 'transitionToRoute')
        story=story
    }}
  `, this);

  await deleteStory();

  assert.notOk(verify(onTransitionToRoute)('dashboard'));
});

test(`Delete story - transitions to the group for non-editors if there's a group`, async function(assert) {
  const user = make('user');
  const story = make('story', {
    author: user
  });
  const group = make('group');
  this.set('story', story);
  this.set('session.currentUser', user);
  this.set('group', group);

  mockDelete('story', 1);

  const showSuccessMessage = mockFunction();
  this.get('notifications').showSuccessMessage = showSuccessMessage;

  const onTransitionToRoute = mockFunction();
  this.on('transitionToRoute', onTransitionToRoute);

  renderWithWormholes(`
    {{story-toolbar
        transitionToRoute=(action 'transitionToRoute')
        story=story
        groupContext=group
    }}
  `, this);

  await deleteStory();

  assert.notOk(verify(onTransitionToRoute)('group', group));
});

test(`Open sharing modal - user's own story and older than 13`, async function(assert) {
  const user = make('user', 'older-than-13');
  const story = make('story', {
    slug: 'the-slug',
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);
  const createCommand = mockFunction();
  this.get('commandFactory').createCommand = createCommand;
  const execute = mockFunction();
  const makeStoryPublicCommand = {
    execute: execute
  };
  when(createCommand)('make-story-public').thenReturn(makeStoryPublicCommand);

  when(execute)(story).thenReturn(succeedingPromise());

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await page.openSharingModal();

  assert.notOk(
    verify(execute)(story),
    'Makes the story public upon opening the sharing modal'
  );

  // Simulate being made public
  Ember.run(() => {
    story.set('isPublic', true);
  });

  assert.equal(
    shareStoryPage.publicLink,
    `${window.location.origin}/story/the-slug`
  );
  assert.equal(
    shareStoryPage.embedCode,
    `<script src="https://localhost:3000/assets/iframeResizer.js"></script><iframe src="${window.location.origin}/story/the-slug/embed" width="100%" scrolling="no" frameborder="0" allowfullscreen></iframe><script src="https://localhost:3000/assets/iframeResizer.executer.js"></script>`
  );
  assert.ok(shareStoryPage.canMakePrivate, 'Can make private again');
});

test(`Open sharing modal - can share but has already been made public`, async function(assert) {
  const user = make('user', 'older-than-13');
  const story = make('story', 'made-private', {
    slug: 'the-slug',
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);
  const createCommand = mockFunction();
  this.get('commandFactory').createCommand = createCommand;
  const execute = mockFunction();
  const makeStoryPublicCommand = {
    execute: execute
  };
  when(createCommand)('make-story-public').thenReturn(makeStoryPublicCommand);

  when(execute)(story).thenReturn(succeedingPromise());

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await page.openSharingModal();

  assert.notOk(
    verify(execute, never())(anything()),
    'Does not make the story public upon opening'
  );
});

test(`Open sharing modal - user's own story and younger than 13`, async function(assert) {
  const user = make('user', 'younger-than-13');
  const story = make('story', {
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);

  const createCommand = mockFunction();
  this.get('commandFactory').createCommand = createCommand;
  const execute = mockFunction();
  const makeStoryPublicCommand = {
    execute: execute
  };
  when(createCommand)('make-story-public').thenReturn(makeStoryPublicCommand);

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await page.openSharingModal();

  assert.notOk(
    verify(execute, never())(anything()),
    'Does not make the story public upon opening'
  );
  assert.notOk(
    shareStoryPage.canMakePublic,
    'Cannot make the story public'
  );
});

test(`Make private - user's own story`, async function(assert) {
  const user = make('user');
  const story = make('story', 'public', {
    author: user
  });
  this.set('story', story);
  this.set('session.currentUser', user);
  const createCommand = mockFunction();
  this.get('commandFactory').createCommand = createCommand;
  const makeStoriesPrivate = mockFunction();
  const makeStoriesPrivateCommand = {
    execute: makeStoriesPrivate
  };
  when(createCommand)('make-stories-private').thenReturn(makeStoriesPrivateCommand);

  when(makeStoriesPrivate)([story]).thenReturn(succeedingPromise());

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await makeStoryPrivate();

  assert.notOk(verify(makeStoriesPrivate)([story]), 'Makes the story private');
});

test(`Users under 13 can not share a story on social media`, async function(assert) {
  const story = make('story', 'public');
  this.set('story', story);
  const user = make('user', 'younger-than-13');
  this.set('session.currentUser', user);

  renderWithWormholes(`
    {{story-toolbar
        story=story
    }}
  `, this);

  await page.openSharingModal();

  assert.notOk(exists('.social-media-sharing-buttons'), 'Can not share on social media');
});

test('Print story - cannot print when the story is embedded', async function(assert) {
  const story = make('story');
  this.set('story', story);
  renderWithWormholes(`
    {{story-toolbar
        story=story
        showSecondaryActionsButton=true
        isEmbedded=true
    }}
  `, this);

  await page.openSecondaryMenu();

  assert.notOk(exists('.button-print-story'));
});

test('Print story - can print when the story is not embedded', async function(assert) {
  const story = make('story');
  this.set('story', story);
  renderWithWormholes(`
    {{story-toolbar
        story=story
        showSecondaryActionsButton=true
        isEmbedded=false
    }}
  `, this);

  await page.openSecondaryMenu();

  assert.ok(exists('.button-print-story'));
});
