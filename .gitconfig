# Inspiration from https://blog.gitbutler.com/how-git-core-devs-configure-git/
[core]
  editor = vim
  excludesfile = /home/yoran/.gitignore_global
[user]
  name = Yoran Brondsema
  email = yoran.brondsema@gmail.com
[credential]
  helper = cache --timeout=3600
[alias]
  st = status
  ca = commit --amend --no-edit
  br = branch
  cm = checkout master
  cb = checkout -b
  last = log -n1 # display last commit
  poh = push origin HEAD
  pohf = push origin HEAD --force-with-lease
  plo = pull origin
  plom = pull origin master
  aa = add -A
  delete-merged-branches = "!f() { \
    git fetch -p && \
    master_sha=$(git rev-parse master) && \
    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/ | grep -vE 'master|main'); do \
      branch_sha=$(git rev-parse \"$branch\") && \
      if git merge-base --is-ancestor \"$branch\" master || [ \"$branch_sha\" = \"$master_sha\" ]; then \
        git branch -d \"$branch\" && \
        git push origin --delete \"$branch\" || true; \
      fi; \
    done && \
    git remote prune origin; \
  }; f"
  diffall = !git add -N . && git diff && git reset
  gcauto = !~/.git-gcauto.sh
[gpg]
  program = gpg2
[push]
  default = simple
  autoSetupRemote = true
  followTags = true
[pull]
  rebase = true
[pager]
  branch = false
  log = false
[init]
  defaultBranch = main
[branch]
  sort = -committerdate
[tag]
  sort = version:refname
[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
[fetch]
  prune = true
  pruneTags = true
  all = true
[commit]
  verbose = true
[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true
